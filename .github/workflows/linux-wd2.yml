name: CI-wd2

on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  #schedule:
    #- cron: "0 */5 * * *"
    
  workflow_dispatch:
    inputs:
        app:
          type: string
          required: false
        parameters_json:
          type: string
          required: false
  # repository_dispatch:
  
env:
  SGHREPO: ${{ secrets.SGHREPO }}
  SGHDIR: ${{ secrets.SGHDIR }}
  GH_TOKEN: ${{ secrets.SGHTOKEN }}
  SNUSER: ${{ secrets.SNUSER }}
  SNUSERTOKEN: ${{ secrets.SNUSERTOKEN }}
  SNSKEY: ${{ secrets.SNSKEY }}
  HSUSER: ${{ secrets.HSUSER }}
  HSPASS: ${{ secrets.HSPASS }}
  HSPORT: ${{ secrets.HSPORT }}
  NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
  SSH_PASSWORD: ${{ secrets.HSPASS }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  ENV64: ${{ secrets.ENV64 }}
  WORKFLOW_REF: ${{ github.workflow_ref }}
          
# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.event.inputs.app == '' }}
#   # cancel-in-progress: ${{ github.event.inputs.parameters_json == '' }}

jobs:
  define-dispatchs:
    if: "${{ github.event.inputs.app == '' }}"
    # if: "${{ github.event.inputs.parameters_json == '' }}"
    runs-on: ubuntu-latest

    outputs:
      apps: ${{ steps.apps.outputs.apps }}
      appscount: ${{ steps.apps.outputs.appscount }}

    steps:
      - uses: actions/checkout@v4
      
      - name: "Cancel previous workflows"
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          for id in $(gh run list --limit 5000 --jq ".[] | select ((.status == \"queued\" or .status == \"in_progress\") and .workflowName == \"${{ github.workflow }}\") | .databaseId" --json databaseId,status,workflowName); 
          do 
            currRunId=${{ github.run_id }} 
            if [[ "$currRunId" != "$id" ]]; then
              gh run cancel $id; 
            fi
          done;

      - name: Delete artifacts
        uses: jimschubert/delete-artifacts-action@v1
        with:
          log_level: 'debug'
          min_bytes: '0'
          active_duration: '1s'

      # - name: "Delete artifacts"
      #   env:
      #     GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
      #   run: |
      #     for id in $(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/actions/artifacts" --jq '.artifacts | .[] | .id');
      #     do 
      #         gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/repos/${{ github.repository }}/actions/artifacts/${id}"; 
      #     done;

      - name: Load ENV file
        run: |
          echo $ENV64 | openssl base64 -d --out .env
          #gh secret set -f .env
            
      - name: Read environment file and set variables
        uses: cosq-network/dotenv-loader@v1.0.2
        with:
          env-file: .env

      - name: Get Apps
        run: |
          git config --global user.name "name"
          git config --global user.email "email"
          wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"

      - name: Define Apps
        id: apps
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        run: |
          cd "$SGHDIR"

          appnames=($(jq -r ".apps[].name" ./pm2-t-2024??.json | sed 's/^/"/;s/$/"/' | paste -sd "," -))      
          
          appscount=$(jq -r ".apps[].name" ./pm2-t-2024??.json | wc -l)  
          # appscount=($(jq -r ".apps[].name" ./pm2-t-2024??.json | wc | awk '{print $1}'))  

          echo "apps=[ $appnames ]" >> "$GITHUB_OUTPUT"
          echo "appscount=$appscount" >> "$GITHUB_OUTPUT"

          apps=$(jq -r ".apps[].name" ./pm2-t-2024??.json) 
          appindex=0
          for app in $apps; do 
            # curl -L \
            #   -X POST \
            #   -H "Accept: application/vnd.github+json" \
            #   -H "Authorization: Bearer ${{ secrets.SGHTOKENLOCAL }}" \
            #   -H "X-GitHub-Api-Version: 2022-11-28" \
            #   https://api.github.com/repos/${{ github.repository }}/actions/workflows/linux-wd2.yml/dispatches \
            #   -d '{"ref":"main","inputs":{"app":"${app}","index":${appindex}}}'
            gh workflow run ${{ github.workflow }} --repo ${{ github.repository }} --ref main -f app=$app
            # gh workflow run linux-wd2.yml --repo ${{ github.repository }} --ref main -f app=$app
            appindex=$(expr $appindex + 1)
          done; 

          
  build:
    if: "${{ github.event.inputs.app != '' }}"
    # if: "${{ github.event.inputs.parameters_json != '' }}"
    strategy:
      max-parallel: 1000
      fail-fast: false

    runs-on: ubuntu-latest
    #if: ${{ github.event_name == 'schedule' }}
    permissions:
      actions: write
    timeout-minutes: 360

    steps:
      - uses: actions/checkout@v4

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10
          
      - uses: thaind0/envfile@v1
        with:
          secrets: ${{ toJSON(secrets) }}
          file: .prod.env
          
      - name: Load ENV file
        run: |
          echo $ENV64 | openssl base64 -d --out .env
          #gh secret set -f .env
            
      - name: Read environment file and set variables
        uses: cosq-network/dotenv-loader@v1.0.2
        with:
          env-file: .env
          
          
      - name: Run a multi-line script
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 100
          max_attempts: 3
          command: |
            echo "HSPORT=$HSPORT" >> $GITHUB_ENV
            sudo apt-get update
            sudo apt install fish magic-wormhole jq
            mkdir -p ~/.config/fish
            mkdir -p ~/.local/bin
            
            sudo tee -a ~/.bash_profile <<EOF
              if [ -f ~/.bashrc ]; then
                . ~/.bashrc
              di
            EOF
            sudo chsh -s /usr/bin/fish runner
            sudo chsh -s /usr/bin/fish root
            
            wget https://github.com/neovim/neovim-releases/releases/download/v0.10.0/nvim.appimage
            chmod u+x ./nvim.appimage && mv ./nvim.appimage ~/.local/bin/nvim
            sudo apt-get install fuse libfuse2
            #git clone https://github.com/LazyVim/starter ~/.config/lazyvim

            wget https://github.com/extrawurst/gitui/releases/download/v0.26.3/gitui-linux-x86_64.tar.gz && tar xvf gitui-linux-x86_64.tar.gz && mv ./gitui ~/.local/bin/.
            wget https://github.com/jesseduffield/lazygit/releases/download/v0.42.0/lazygit_0.42.0_Linux_x86_64.tar.gz && tar -zxvf lazygit_0.42.0_Linux_x86_64.tar.gz lazygit && mv lazygit ~/.local/bin/.
            git config --global user.name "name"
            git config --global user.email "email"
            wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
            gh auth setup-git
            gh repo clone $SGHREPO && cd "$SGHDIR"
            cp -r ./fixes/ghrunner-dotfiles/. ~/.
            cp -r ./fixes/termux-configs/lazyvim ~/.config/.
            sudo systemctl restart sshd
            fish -c "lvim" &
            tmpvar=$(git submodule update --init --recursive && git config submodule.recurse true && git pull)
            sudo apt-get install ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils 
            #chromium-browser
            #chromium
            #sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils
            #wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 
            #sudo dpkg -i google-chrome-stable_current_amd64.deb; sudo apt-get -fy install
            
            curl https://mise.run | sh
            #echo '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish
            echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc && source ~/.bashrc
            mise use --global node@14.15.4
            
            npm i -g yarn && npm i -g pm2 && npm i -g nodemon && yarn config set network-timeout 600000 -g && yarn --ignore-optional --ignore-scripts && node ./node_modules/puppeteer/install.js
          

      - name: Netbird Connect and handy-sshd and bore, gotty
        run: |
            echo "export TERM=xterm-256color" >> ~/.bashrc
            wget https://github.com/nwtgck/handy-sshd/releases/download/v0.4.3/handy-sshd-0.4.3-linux-amd64.deb && sudo apt install ./handy-sshd-0.4.3-linux-amd64.deb && rm ./handy-sshd-0.4.3-linux-amd64.deb
            sudo handy-sshd -p "$HSPORT" -u "$HSUSER":"$HSPASS" &
            WEBPORT="$HSPORT"
            wget https://github.com/ekzhang/bore/releases/download/v0.5.1/bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && tar xf ./bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && mv ./bore ~/.local/bin/.
            wget https://github.com/yudai/gotty/releases/download/v2.0.0-alpha.3/gotty_2.0.0-alpha.3_linux_amd64.tar.gz && tar xvf gotty_2.0.0-alpha.3_linux_amd64.tar.gz && mv ./gotty ~/.local/bin/.
            wget https://github.com/yubo/gotty/releases/download/pre-release/gotty_linux_amd64.tar.gz && tar xf ./gotty_linux_amd64.tar.gz && mv ./gotty ~/.local/bin/gotty2
            chmod +x ~/.local/bin/.
            #gotty --height 384 --width 512 --reconnect -c $HSUSER:$HSPASS -w fish &
            #sudo gotty2 deamon
            #WEBPORT=8080
            #sudo apt install ttyd && sudo -u runner ttyd -c "$HSUSER:$HSPASS" -W fish &
            #WEBPORT=7681
            #bore local -t bore.pub -p $HSPORT $WEBPORT &
            boreport=$(shuf -i 2000-65000 -n 1)
            nohup bore local -t bore.pub -p $boreport $HSPORT &
            cmdpid=$!
            sleep 3
            while ! ps -p $cmdpid > /dev/null
            do
              boreport=$(shuf -i 2000-65000 -n 1)
              nohup bore local -t bore.pub -p $boreport $HSPORT &
              cmdpid=$!
              sleep 3
            done
            echo "boreport=$boreport" >> $GITHUB_ENV
            
            #curl -sSf https://sshx.io/get | sh
            #nohup sshx -q --shell fish > ./sshx.out 2> /dev/null & sleep 3
            ##SSHXURL=$(<sshx.out)
            ##SSHXURL=`cat sshx.out`
            #SSHXURL="$(cat ./sshx.out)"
            echo "${{ github.workflow }}" > ~/workflowname
            SSHXURL=""
            MSG=$'\n'"wf: ${{ github.workflow }} - ${{ github.event.inputs.app }}"$'\n'"boressh:  \`boldssh ${HSUSER}@bore.pub -p ${boreport}\`";
            tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}");
            
            echo $HSUSER:$HSPASS | sudo chpasswd root
            echo $HSUSER:$HSPASS | sudo chpasswd runner
            sudo sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sudo echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config
            sudo systemctl reload sshd
            WEBPORT=22
            #bore local -t bore.pub -p $HSPORT $WEBPORT &
            #pip install webssh
            #wssh &
            #WEBPORT=8888
            


      # - uses: ahmadnassri/action-workflow-queue@v1

      - name: start-app    
        env: 
          app: ${{ github.event.inputs.app }}
          # app: ${{ fromJson(github.event.inputs.parameters_json).app }}

        #uses: nick-fields/retry@v3
        #with:
        #  timeout_minutes: 2
        #  max_attempts: 1
        #  command: |
        run:  |
            cd ./$SGHDIR && git pull
            cd ./data && git checkout main && git pull --rebase --autostash && cd ..;
            pm2 delete all && cd ./data && git reset --hard HEAD && cd ..;
            #pm2 start ./${app}.js
            nohup node ./${app}.js &
            echo test | tee -a ./data/test-${app}.md

            #tail -f "/home/runner/.pm2/logs/${app}-out.log" | while read LOGLINE
            #do
            #  [[ "${LOGLINE}" == *"init puppeteer complete"* ]] && pkill -P $$ tail
            #done
            #grep -m 1 "complete" <(tail -f "/home/runner/.pm2/logs/${app}-out.log")
            #( tail -f -n0 "/home/runner/.pm2/logs/${app}-out.log" & ) | grep -q "complete"
            #killall -s SIGKILL tail
            #exit 0
      
      # - name: 'bacground-tail-telegram'
      #   uses: miguelteixeiraa/action-run-in-background@v1
      #   with:
      #     shell: bash
      #     timeout: 30
      #     readiness-script: |
      #       # cd ./$SGHDIR && git pull
      #       # pm2 start ./${app}.js
      #       exit 0
      #     script: |
      #       cd ./$SGHDIR
      #       tailmsg=$(tail ./logs.txt)
      #       # tailmsg=$(tail -n 5 "/home/runner/.pm2/logs/${app}-out.log")
      #       while true; do MSG=$'\n'"wf: ${{ github.workflow }} - ${{ github.event.inputs.app }}"$'\n'"boressh:  \`${tailmsg}\`"; tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}"); sleep 60; done; 

      - name: Sleep for 5 hours
        uses: jakejarvis/wait-action@master
        with:
          time: '5h'
        timeout-minutes: 360

      # - name: Invoke workflow
      #   if: success()
      #   env:
      #     GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: linux-wd2.yml
      #     repo: ${{ github.repository }}
      #     token: "${{ secrets.SGHTOKENLOCAL }}"

      # - name: Invoke workflow-fail
      #   if: failure()
      #   env:
      #     GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
      #   uses: benc-uk/workflow-dispatch@v1
      #   with:
      #     workflow: linux-wd2.yml
      #     repo: ${{ github.repository }}
      #     token: "${{ secrets.SGHTOKENLOCAL }}"

      - name: Sleep for 5 mins for new Workflow to init
        if: success() || failure()
        uses: jakejarvis/wait-action@master
        with:
          time: '5s'
          
      - name: Commit changes
        id: commit
        if: success() || failure()
        #working-directory: automl-test
        # uses: nick-fields/retry@v3
        # with:
        #   timeout_minutes: 5
        #   max_attempts: 1
        #   command: |
        run:  |
            cd ./$SGHDIR && git pull
            # git push origin HEAD:main;
            cd ./data && git switch main && git pull --rebase --autostash
            # cd ./data && git stash --include-untracked && git checkout main && git stash pop && git pull --rebase --autostash
            # git push origin HEAD:main;
            
            # git ls-files --others --exclude-standard | grep trades | xargs git add
            # git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "trade changes" && git push origin HEAD:main; }
            # git ls-files -m | grep trades | xargs git add
            # git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "modified trade changes" && git push origin HEAD:main; }
            # cd ..;
            # git add ./data
            # git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "trade changes" && git push origin HEAD:main; }

            mkdir reports
            git ls-files --others --exclude-standard | grep trades | xargs -I {} mv {} reports/
            git ls-files --others --exclude-standard | grep test | xargs -I {} mv {} reports/
            git ls-files -m | grep trades | xargs -I {} mv {} reports/
            git ls-files -m | grep test | xargs -I {} mv {} reports/
            mv reports ../../reports; 
            
      - name: Upload reports' artifacts 
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RUN_UNIQUE_ID }}_artifact_${{ github.event.inputs.app }}
          # name: ${{ env.RUN_UNIQUE_ID }}_artifact_${{ fromJson(github.event.inputs.parameters_json).app }}
          if-no-files-found: ignore
          path: reports
          retention-days: 1
          overwrite: true

      - name: wait 30m for commit
        if: steps.commit.conclusion == 'failure' || steps.commit.outcome == 'failure'
        uses: jakejarvis/wait-action@master
        with:
          time: '3m'
        
      # - name: Cancel workflow
      #   if: success() || failure()
      #   uses: action-pack/cancel@v1
      
  process-build-data:
    needs: define-dispatchs
    runs-on: ubuntu-latest
    if: "${{ github.event.inputs.app == '' }}"
    # if: "${{ github.event.inputs.parameters_json == '' }}"
    steps:
      - uses: actions/checkout@v4

      - name: wait 5h for other jobs complete
        uses: jakejarvis/wait-action@master
        with:
          time: '5h'

      - name: wait 5m for other jobs commits complete
        uses: jakejarvis/wait-action@master
        with:
          time: '5m'
         
      - name: Netbird Connect and handy-sshd and bore, gotty
        # if: failure()
        run: |
            echo "HSPORT=$HSPORT" >> $GITHUB_ENV
            sudo apt-get update
            sudo apt install fish magic-wormhole jq
            mkdir -p ~/.config/fish
            mkdir -p ~/.local/bin
  
            sudo tee -a ~/.bash_profile <<EOF
              if [ -f ~/.bashrc ]; then
                . ~/.bashrc
              di
            EOF
            sudo chsh -s /usr/bin/fish runner
            sudo chsh -s /usr/bin/fish root
            
            wget https://github.com/neovim/neovim-releases/releases/download/v0.10.0/nvim.appimage
            chmod u+x ./nvim.appimage && mv ./nvim.appimage ~/.local/bin/nvim
            sudo apt-get install fuse libfuse2
            #git clone https://github.com/LazyVim/starter ~/.config/lazyvim
            git clone https://github.com/LazyVim/starter ~/.config/nvim

            wget https://github.com/extrawurst/gitui/releases/download/v0.26.3/gitui-linux-x86_64.tar.gz && tar xvf gitui-linux-x86_64.tar.gz && mv ./gitui ~/.local/bin/.
            wget https://github.com/jesseduffield/lazygit/releases/download/v0.42.0/lazygit_0.42.0_Linux_x86_64.tar.gz && tar -zxvf lazygit_0.42.0_Linux_x86_64.tar.gz lazygit && mv lazygit ~/.local/bin/.

            sudo systemctl restart sshd
            fish -c "lvim" &
  
            echo "export TERM=xterm-256color" >> ~/.bashrc
            fish -c "set -Ux TERM xterm-256color"
            wget https://github.com/nwtgck/handy-sshd/releases/download/v0.4.3/handy-sshd-0.4.3-linux-amd64.deb && sudo apt install ./handy-sshd-0.4.3-linux-amd64.deb && rm ./handy-sshd-0.4.3-linux-amd64.deb
            sudo handy-sshd -p "$HSPORT" -u "$HSUSER":"$HSPASS" &
            WEBPORT="$HSPORT"
            wget https://github.com/ekzhang/bore/releases/download/v0.5.1/bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && tar xf ./bore-v0.5.1-x86_64-unknown-linux-musl.tar.gz && mv ./bore ~/.local/bin/.
            chmod +x ~/.local/bin/.
            boreport=$(shuf -i 2000-65000 -n 1)
            nohup bore local -t bore.pub -p $boreport $HSPORT &
            cmdpid=$!
            sleep 3
            while ! ps -p $cmdpid > /dev/null
            do
              boreport=$(shuf -i 2000-65000 -n 1)
              nohup bore local -t bore.pub -p $boreport $HSPORT &
              cmdpid=$!
              sleep 3
            done
            echo "boreport=$boreport" >> $GITHUB_ENV
            
            echo "${{ github.workflow }}" > ~/workflowname
            SSHXURL=""
            MSG=$'\n'"wf: ${{ github.workflow }} - MAIN"$'\n'"boressh:  \`boldssh ${HSUSER}@bore.pub -p ${boreport}\`"$'\n'"sshx:  \`${SSHXURL}\`";
            tmpvar=$(curl -sX POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" -d "disable_web_page_preview=True" -d "parse_mode=Markdown" -d "chat_id=${TELEGRAM_CHAT_ID}" -d "text=${MSG}");
            
            echo $HSUSER:$HSPASS | sudo chpasswd root
            echo $HSUSER:$HSPASS | sudo chpasswd runner
            sudo sed -i 's/^PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config
            sudo echo 'PermitRootLogin yes' | sudo tee -a /etc/ssh/sshd_config
            sudo systemctl reload sshd
            WEBPORT=22

            # curl -fsSL https://pkgs.netbird.io/install.sh | sh
            # netbird login --setup-key $SNSKEY --hostname ghserver
            # netbird up --setup-key $SNSKEY --hostname ghserver --allow-server-ssh

      # - name: Retry Download artifact
      #   id: retry-download-artifact
      #   uses: dawidd6/action-download-artifact@v6
      #   with:
      #     github_token: ${{ secrets.SGHTOKENLOCAL }}
      #     workflow: ${{ github.workflow }}
      #     workflow_search: false
      #     workflow_conclusion: success
      #     # workflow_conclusion: completed
      #     branch: main
      #     path: downloaded_artifacts
      #     repo: ${{ github.repository }}
      #     if_no_artifact_found: fail

      - name: Retry Download artifact
        id: retry-download-artifact
        env:
          GH_TOKEN: ${{ secrets.SGHTOKENLOCAL }}
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 1
          max_attempts: ${{ needs.define-dispatchs.outputs.appscount }}
          retry_wait_seconds: 60
          retry_on_exit_code: 1
          continue_on_error: true
          command: |
            gh run download --repo ${{ github.repository }} --pattern "*" --dir downloaded_artifacts || exit 1
            # if [ "$(ls downloaded_artifacts/ | wc -l)" -lt ${{ needs.define-dispatchs.outputs.appscount }} ]; then exit 1; fi;
            [[ $(ls downloaded_artifacts/ | wc -l) -lt ${{ needs.define-dispatchs.outputs.appscount }} ]] && exit 1 || echo done
            # [[ $(ls -A downloaded_artifacts/*) ]] && echo "contains files" || { echo "empty" && exit 1 }

      # - name: Download reports' artifacts
      #   uses: actions/download-artifact@v4
      #   with:
      #     path: downloaded_artifacts
 
      - name: Check reports existence
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          # files: 'downloaded_artifacts/**/-*.json'
          files: 'downloaded_artifacts/**/*'

      - name: Place reports' artifacts
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          git config --global user.name "name"
          git config --global user.email "email"
          wget https://github.com/cli/cli/releases/download/v2.52.0/gh_2.52.0_linux_amd64.deb && sudo apt install ./gh_2.52.0_linux_amd64.deb && rm ./gh_2.52.0_linux_amd64.deb
          gh auth setup-git
          gh repo clone $SGHREPO && cd "$SGHDIR"
          tmpvar=$(git submodule update --init --recursive && git config submodule.recurse true && git pull)

          rsync -av ../downloaded_artifacts/*/* data/
          # mv ../downloaded_artifacts/*/* data/
          # yes | cp -rf ../downloaded_artifacts/*/* data/

      - name: Commit results
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          cd ./$SGHDIR && git pull
          cd ./data && git switch main && git pull --rebase --autostash
          # cd ./data && git stash --include-untracked && git checkout main && git stash pop && git pull --rebase --autostash
          git ls-files --others --exclude-standard | grep trades | xargs git add
          git ls-files --others --exclude-standard | grep test | xargs git add
          git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "trade changes" && git push origin HEAD:main; }
          git ls-files -m | grep trades | xargs git add
          git ls-files -m | grep test | xargs git add
          git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "modified trade changes" && git push origin HEAD:main; }
          cd ..;
          git add ./data
          git status -v | grep "nothing to commit" && echo "nothing to commit" || { git commit -m "trade changes" && git push origin HEAD:main; }

      - name: Sleep for 5 hours
        if: steps.check_files.outputs.files_exists == 'true'
        uses: jakejarvis/wait-action@master
        with:
          time: '150m'
        timeout-minutes: 360

         
